mongoose.connect('mongodb://localhost/myapp', { useNewUrlParser: true, useUnifiedTopology: true });

// Create user schema and model
const userSchema = new mongoose.Schema({
  username: String,
  password: String
});
const User = mongoose.model('User', userSchema);

// Set up session middleware
app.use(session({
  secret: 'mysecretkey',
  resave: false,
  saveUninitialized: false
}));S

// Parse incoming requests with JSON payloads
app.use(express.json());

// Serve static files
app.use(express.static('public'));

// Login route
app.post('/login', async (req, res) => {
  const { username, password } = req.body;

  // Find user in the database
  const user = await User.findOne({ username });

  // Check if user exists and password is correct
  if (user && bcrypt.compareSync(password, user.password)) {
    // Set user in the session
    req.session.user = user;
    res.redirect('/dashboard');
  } else {
    res.status(401).send('Invalid username or password');
  }
});

// Logout route
app.get('/logout', (req, res) => {
  // Destroy the session
  req.session.destroy();
  res.redirect('/login');
});

// Middleware to protect routes
const protectRoute = (req, res, next) => {
  if (req.session.user) {
    next();
  } else {
    res.redirect('/login');
  }
};

// Dashboard route (protected)
app.get('/dashboard', protectRoute, (req, res) => {
  res.send(`Welcome, ${req.session.user.username}! <a href="/logout">Logout</a>`);
});

// Start the server
app.listen(port, () => {
  console.log(`Server listening on http://localhost:${port}`);
});